const fs = require("fs");
const path = require("path");
const { OpenAI } = require("openai");
require("dotenv").config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const intencoes = [
  // ENTRADA/RECEITA
  { intencao: "registrar_entrada", frases: [
  "recebi meu sal√°rio",
  "entrou um pix de 200",
  "ganhei comiss√£o de venda",
  "recebi pagamento de cliente",
  "caiu dinheiro na conta",
  "depositaram 500 pra mim",
  "entrou transfer√™ncia banc√°ria",
  "vendi um produto hoje",
  "fiz uma venda agora",
  "entrou grana do servi√ßo",
  "me pagaram 150",
  "pix recebido do Jo√£o"
]},
  // SA√çDA/DESPESA
  { intencao: "registrar_saida", frases: [
  "paguei o aluguel",
  "gastei 120 reais no mercado",
  "comprei um presente",
  "paguei a fatura do cart√£o 4500",
  "gastei 50 no almo√ßo",
  "comprei caf√© por 7 reais",
  "paguei conta de luz",
  "fiz uma compra online",
  "despesa com uber",
  "foi d√©bito hoje 300",
  "paguei a academia",
  "paguei o boleto do cart√£o 4500",
  "gastei 80 na farm√°cia",
  "saquei dinheiro do banco"
]
},
    // REGISTRO COM DATA PASSADA
  {intencao: "registrar_saida_periodo", frases:[
  "ontem paguei o boleto do cart√£o 4500",
  "semana passada comprei um presente",
  "no dia 10 paguei o aluguel",
  "m√™s passado paguei a academia",
  "no s√°bado gastei no restaurante",
  "comprei comida ontem",
  "anteontem paguei a luz",
  "semana retrasada fiz uma compra online",
  "no feriado gastei com viagem",
  "h√° dois dias paguei farm√°cia",
  "no √∫ltimo dia 5 comprei sapato"
]},
  // AGENDAR PAGAMENTO FUTURO
  { intencao: "agendar_pagamento", frases: [
  "preciso pagar o boleto do cart√£o dia 18",
  "me lembre de pagar a fatura amanh√£",
  "agendar pagamento do cart√£o para semana que vem",
  "vou pagar aluguel segunda-feira",
  "marcar para pagar academia no dia 10",
  "agenda boleto para sexta-feira",
  "lembra de pagar a conta de luz dia 12",
  "programar pagamento da internet m√™s que vem",
  "tem boleto vencendo amanh√£, agendar"
]},

  // CONSULTA SALDO
  { intencao: "consultar_saldo", frases: [
  "quanto eu tenho de saldo?",
  "meu saldo",
  "saldo atual",
  "qual meu saldo dispon√≠vel?",
  "como est√° meu saldo?",
  "ver saldo",
  "quanto sobrou na conta?",
  "me diz o saldo"
]},
  // CONSULTA EXTRATO
  { intencao: "consultar_extrato", frases: [
  "me mostra o extrato",
  "extrato da semana",
  "extrato do m√™s",
  "consultar lan√ßamentos",
  "quais foram as movimenta√ß√µes?",
  "ver extrato detalhado",
  "extrato do dia",
  "extrato completo"
]},
  // CONSULTA ENTRADAS
  { intencao: "consultar_entradas", frases: [
  "quanto recebi esse m√™s?",
  "minhas entradas",
  "entradas da semana",
  "quais entradas do m√™s?",
  "ganhos do m√™s",
  "me mostra os recebimentos",
  "quais valores entraram?",
  "teve entrada hoje?"
]
},
  // CONSULTA SA√çDAS
  { intencao: "consultar_saidas", frases: [
  "quais foram minhas despesas?",
  "quanto saiu esse m√™s",
  "minhas sa√≠das da semana",
  "despesas da semana",
  "gastos do m√™s",
  "quanto gastei esse m√™s?",
  "me mostra os gastos",
  "tive despesa hoje?"
]},
  // MAIOR GASTO
  { intencao: "consultar_maior_gasto", frases: [
  "maior gasto da semana",
  "gasto mais alto do m√™s",
  "qual foi minha maior sa√≠da?",
  "onde gastei mais?",
  "maior despesa do per√≠odo",
  "qual o maior valor gasto?",
  "maior compra do m√™s"
]},
  // MAIOR ENTRADA
  { intencao: "consultar_maior_entrada", frases: [
  "maior entrada do m√™s",
  "entrada mais alta",
  "ganho maior da semana",
  "maior recebimento",
  "maior valor recebido",
  "qual maior valor de entrada?",
  "recebimento mais alto"
]},
  //sauda√ß√µes
  {intencao: "saudacao", frases: [
  "bom dia",
  "boa tarde",
  "boa noite",
  "oi",
  "ol√°",
  "hello",
  "hey",
  "hi"
]},
  //duvidas
   {intencao: "duvidas", frases: [
  "n√£o entendi",
  "repete por favor",
  "como faz para consultar saldo?",
  "ajuda",
  "pode explicar de novo?"
]
},


  // OUTROS EXEMPLOS...
  // Aqui adicione outras inten√ß√µes espec√≠ficas do seu neg√≥cio, sempre sem repetir frases entre inten√ß√µes!
];


async function gerarEmbedding(texto) {
  const response = await openai.embeddings.create({
    model: "text-embedding-ada-002",
    input: texto
  });
  return response.data[0].embedding;
}

async function gerarBase() {
  const resultado = [];

  for (const item of intencoes) {
    for (const frase of item.frases) {
      console.log(`üß† Embedding: [${item.intencao}] ‚Üí "${frase}"`);
      const embedding = await gerarEmbedding(frase);
      resultado.push({
        intencao: item.intencao,
        frase,
        embedding
      });
    }
  }

  const outputPath = path.join(__dirname, "base_inteligencia_unificada.json");
  fs.writeFileSync(outputPath, JSON.stringify(resultado, null, 2));
  console.log("\n‚úÖ base_inteligencia_unificada.json gerado com sucesso!");
}

gerarBase();
